app to track spending for a trip with friends
	full on road trip app
	planning schedule
		weather api? for packing feature
	    add itinerary to calendar and share with friends and family	
		flight api for tracking
	booking
	chat/forum - sharing, recommendations(based off of likes), friends
	budgeting
		check car/travel apis
			https://www.fueleconomy.gov/feg/ws/
		currency converter

	passport/airplane ticket/important document holder
	friend gps tracking
	coupons/discounts/advertising
	eventually add destinations/ideas for what to do at certain places
		atlas of places/activities
		input amount of time/money/travel resources/etc and get ideas of things to do
	eventually add a language learning feature based on where you're going
	my trip memories feature - makes into collaeuge/pics/all the stuff you did
		sort of like a diary of what you did on the trip
			or an automated travel blog
	news/alerts on weather/travel issues/safety concerns
		turn on gps to allow friends to keep track of you
			alert the local authorities button
	'everyone has a different definition of travel. we aim to be an outlet/resource for every single definition'

	health/medical section (diet/calory tracking, medical records, etc)

avett theme
	https://www.google.com/search?q=avett+brothers+travel+songs&oq=avett+brothers+travel+songs&aqs=chrome..69i57.6982j0j7&sourceid=chrome&ie=UTF-8

traveling song
	https://www.google.com/search?q=traveling+song+avett+brothers&oq=traveling+song+avett&aqs=chrome.0.0j46j69i57j0l3.3348j0j7&sourceid=chrome&ie=UTF-8

ramblin man
	

{
split wise app - check their functionality
group users

}



rosetta stone
	check apis




numpy
pandas
data processing
jupiter notebooks
microsoft resources
mada idea












-budget planning - api to car, weather etc.

-analytics: split analyses with buttons and create more analyses






















checker notes:

check on weekly basis (once or twice per student)
update student and excel with notes
communicate with students through slack - provide some useful feedback




DI 101

https://app.tepez.co.il/e/5e82245c938ed922232b3e0c/?b=X1wxNjQ4NjU5MjkyXFg5VUZjSlk1bzJ6dVNlLzYxVGFXcytDT2hTTGc4azdublBaczJaSjBOMEk9XA



HTML/CSS course:

Tuesday - 2pm

explain to beginners basics of html and css

how an html page is formatted

-basics tags

























    # # {date: {cat1: 0, cat2: 0},}
    # spending_by_day_and_cat = {}
    # for date in date_span:
    #     spending_by_day_and_cat[date] = {}
    #     for purchase in purchases:
    #         spending_by_day_and_cat[date][purchase.category.name] = {'total_spent': 0}
    #
    # # print(spending_by_day_and_cat)
    #
    # # fill values:
    # # {date: {cat1: 30, cat2: 24},}
    # for purchase in purchases:
    #     # convert date to proper format
    #     date_str = str(purchase.datetime).split(' ')[0]
    #     date_dt = parser.parse(date_str)
    #     date = []
    #     date.append(date_dt)
    #
    #     spending_by_day_and_cat[date[0]][purchase.category.name]['total_spent'] += purchase.price
    #
    # print(spending_by_day_and_cat)
    #
    # for key, value in spending_by_day_and_cat:
    #
    #
    #
    # # graph
    # x = []
    # for key in spending_by_day_and_cat.keys():
    #     x.append(key.date())
    #
    # # y = []
    # # for val in spending_by_day.values():
    # #     y.append(val)
    #
    # specific_data = {}
    # for val in spending_by_day_and_cat.values():
    #     print(val)
    #
    #     for key in val.keys():
    #         specific_data[key] = []
    #
    #     for key in val.keys():
    #         specific_data[key].append(val[key]['total_spent'])
    #
    #         # specific_data.append(f"go.Bar(name={key}, x=x, y={val[key]['total_spent']})")
    #
    #
    # print(specific_data)



    # specific_data_str = ', '.join(specific_data)
    #
    #
    # fig = go.Figure(data=f"[{specific_data_str}]")
    # # Change the bar mode
    # fig.update_layout(barmode='stack')
    # fig.show()










    # for date in date_span:
    #     spending_by_day[date] = {''}
    #
    # for purchase in purchases:
    #     date_str = str(purchase.datetime).split(' ')[0]
    #     date_dt = parser.parse(date_str)
    #     spending_by_day[date_dt] += purchase.price





    # # graph
    # x = []
    # for key in spending_by_day.keys():
    #     x.append(key.date())
    #
    # y = []
    # for val in spending_by_day.values():
    #     y.append(val)
    #
    # fig = go.Figure(data=[
    #     go.Bar(name='Day', x=x, y=y),
    #     go.Bar(name='LA Zoo', x=animals, y=[12, 18, 29])
    # ])
    # # Change the bar mode
    # fig.update_layout(barmode='stack')
    # fig.show()



    # line grpah
    # x = []
    # for key in spending_by_day.keys():
    #     x.append(key.date())
    #
    # y = []
    # for val in spending_by_day.values():
    #     y.append(val)
    #
    # fig = go.Figure(data=[go.Scatter(x=x, y=y)])
    # # Use datetime objects to set xaxis range
    # fig.update_layout(xaxis_range=[x[0], x[-1]], title_text='Trip Expenses by Day', yaxis_title='Money spent ($)', xaxis_rangeslider_visible=True)
    #
    # fig.show()















